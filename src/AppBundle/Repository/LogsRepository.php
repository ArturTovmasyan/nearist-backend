<?php

namespace AppBundle\Repository;

/**
 * LogsRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class LogsRepository extends \Doctrine\ORM\EntityRepository
{
    const PAGINATION_COUNT = 10;
    const HOUR = 1;
    const DAY = 2;
    const WEEK = 3;

    /**
     * This function is used to get server log data
     *
     * @param $id
     * @param $temp
     * @param $type
     * @param $page
     * @param $dateFilter
     * @param $count
     * @return array
     */
    public function findLogs($id, $page = 0, $temp, $type, $dateFilter, $count = self::PAGINATION_COUNT)
    {
        $start = 0;

        if ($page > 0) {
            $start = ($page - 1) * $count;
        }

        $qb = $this
            ->createQueryBuilder('log')
            ->leftJoin('log.server', 's');

        if($type == 0) {
            $qb->where('log.type = 0 or log.type = 6');
        } else {
            $qb->where('log.type = :type')
                ->setParameter('type', $type);
        }

        if ($id != null) {
            $qb->andWhere('s.id = (:id)')
                ->setParameter('id', $id);
        }

        if ($temp && $temp != 0) {
            $qb
                ->andWhere('log.temperature > (:temp)')
                ->setParameter('temp', $temp);
        }

        if ($dateFilter) {

            if ($dateFilter == self::WEEK) {
                $start_week = date("Y-m-d", strtotime('monday this week'));
                $end_week = date("Y-m-d", strtotime('sunday this week'));

                $qb
                    ->andWhere('log.dateTime > (:start) AND log.dateTime < (:end)')
                    ->setParameter('start', $start_week)
                    ->setParameter('end', $end_week);

            } elseif ($dateFilter == self::DAY) {
                $qb
                    ->andWhere(
                        'YEAR(log.dateTime) = YEAR(CURRENT_DATE()) AND
                        (MONTH(log.dateTime) = MONTH(CURRENT_DATE())) AND
                        (DAY(log.dateTime) = DAY(CURRENT_DATE()))'
                    );
            } elseif ($dateFilter == self::HOUR) {
                $qb
                    ->andWhere(
                        'YEAR(log.dateTime) = YEAR(CURRENT_DATE()) AND
                        (MONTH(log.dateTime) = MONTH(CURRENT_DATE())) AND
                        (DAY(log.dateTime) = DAY(CURRENT_DATE())) AND
                        (HOUR(log.dateTime) = HOUR(CURRENT_TIME()))'
                    );
            }
        }

        $qb
            ->orderBy('log.id', 'DESC')
            ->setFirstResult($start)
            ->setMaxResults($count);

        return $qb->getQuery()->getResult();
    }

    /**
     * @param $id
     * @param $type
     * @param $dateFilter
     * @return array
     */
    public function getLogsSum($id, $type, $dateFilter)
    {
        $qb = $this
            ->createQueryBuilder('log')
            ->select('COUNT(log.id)')
            ->leftJoin('log.server', 's')
            ->where('s.id = (:id)')
            ->andWhere('log.type = :type')
            ->setParameter('id', $id)
            ->setParameter('type', $type);

        if ($dateFilter) {

            if ($dateFilter == self::WEEK) {
                $start_week = date("Y-m-d", strtotime('monday this week'));
                $end_week = date("Y-m-d", strtotime('sunday this week'));

                $qb
                    ->andWhere('log.dateTime > (:start) AND log.dateTime < (:end)')
                    ->setParameter('start', $start_week)
                    ->setParameter('end', $end_week);

            } elseif ($dateFilter == self::DAY) {
                $qb
                    ->andWhere(
                        'YEAR(log.dateTime) = YEAR(CURRENT_DATE()) AND 
                        (MONTH(log.dateTime) = MONTH(CURRENT_DATE())) AND 
                        (DAY(log.dateTime) = DAY(CURRENT_DATE()))'
                    );
            } elseif ($dateFilter == self::HOUR) {
                $qb
                    ->andWhere(
                        'YEAR(log.dateTime) = YEAR(CURRENT_DATE()) AND 
                        (MONTH(log.dateTime) = MONTH(CURRENT_DATE())) AND 
                        (DAY(log.dateTime) = DAY(CURRENT_DATE())) AND
                        (HOUR(log.dateTime) = HOUR(CURRENT_TIME()))'
                    );
            }
        }

        return $qb->getQuery()->getSingleScalarResult();
    }

    /**
     * This function is used to remove logs by server id and type
     *
     * @param $id
     * @param $type
     */
    public function deleteLogs($id, $type)
    {
        $em = $this->getEntityManager();

        $qb = $this
            ->createQueryBuilder('log')
            ->select('log.id')
            ->leftJoin('log.server', 's')
            ->where('s.id = :id AND log.type = :type')
            ->setParameter('id', $id)
            ->setParameter('type', $type);

        //get all remove ids
        $ids = $qb->getQuery()->getResult();
        $ids = array_map(function ($item) {
            return $item['id'];
        }, $ids);

        $qbu = $em->createQueryBuilder();

        //remove logs by ids
        $query = $qbu->delete('AppBundle:Logs', 'l')
            ->where("l.id IN (:ids)")
            ->setParameter('ids', $ids)
            ->getQuery();

        $query->execute();
    }

    /**
     * This function is used to get server log data for customer
     *
     * @param $userId
     * @param int $page
     * @param int $count
     * @return mixed
     */
    public function findByUserId($userId, $page = 0, $count = self::PAGINATION_COUNT)
    {
        $start = 0;

        if ($page > 0) {
            $start = ($page - 1) * $count;
        }

        $logQB = $this->createQueryBuilder('log');

        $logQB
            ->leftJoin('log.server', 'server')
            ->where('log.user = (:userId)')
            ->setParameter('userId', $userId)
            ->orderBy('log.id', 'DESC')
            ->setFirstResult($start)
            ->setMaxResults($count);

        return $logQB->getQuery()->getResult();
    }
}
